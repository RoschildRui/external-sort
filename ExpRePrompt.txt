请你基于任务和任务完成代码，完成报告的撰写，报告应该包括问题定义（包括假设条件）、算法设计与理论分析、实验设计、实验结果分析、心得总结。attention please!!! 不用附录代码，将问题定义（包括假设条件）、算法设计与理论分析、实验设计、实验结果分析、心得总结。详细阐述即可。任务{使用外部排序算法，寻找适合的数据集或自己生成适合的数据集，要求数据量超过自己电脑的内存大小（考虑使用docker），进行排序提交内容包括 .h .cpp格式的源文件}任务完成代码1{external_sort.cpp
#include "external_sort.h"
#include <algorithm>
#include <random>
#include <iostream>
#include <climits>

using namespace std;

ExternalSort::ExternalSort(const string& input, const string& output, const string& temp)
    : inputFile(input), outputFile(output), tempDir(temp) {}

string ExternalSort::getTempFileName(int index) {
    return tempDir + "/chunk_" + to_string(index) + ".tmp";
}

vector<string> ExternalSort::splitAndSort() {
    vector<string> chunkFiles;
    ifstream input(inputFile, ios::binary);
    vector<int> buffer;
    int chunkIndex = 0;

    while (input) {
        buffer.clear();
        
        // 读取一个块的数据
        while (buffer.size() * sizeof(int) < CHUNK_SIZE && !input.eof()) {
            int num;
            if (input.read(reinterpret_cast<char*>(&num), sizeof(int))) {
                buffer.push_back(num);
            }
        }

        if (buffer.empty()) break;

        // 对块进行排序
        std::sort(buffer.begin(), buffer.end());

        // 将排序后的块写入临时文件
        string chunkFile = getTempFileName(chunkIndex++);
        ofstream chunk(chunkFile, ios::binary);
        chunk.write(reinterpret_cast<const char*>(buffer.data()), buffer.size() * sizeof(int));
        chunk.close();

        chunkFiles.push_back(chunkFile);
    }

    input.close();
    return chunkFiles;
}

void ExternalSort::mergeChunks(const vector<string>& chunks) {
    vector<ifstream> inputs;
    priority_queue<pair<int, int>, 
                  vector<pair<int, int>>, 
                  ChunkCompare> pq;

    // 打开所有临时文件
    for (size_t i = 0; i < chunks.size(); i++) {
        inputs.emplace_back(chunks[i], ios::binary);
        int num;
        if (inputs[i].read(reinterpret_cast<char*>(&num), sizeof(int))) {
            pq.push({num, i});
        }
    }

    ofstream output(outputFile, ios::binary);

    // 合并所有块
    while (!pq.empty()) {
        auto [num, index] = pq.top();
        pq.pop();

        output.write(reinterpret_cast<const char*>(&num), sizeof(int));

        int nextNum;
        if (inputs[index].read(reinterpret_cast<char*>(&nextNum), sizeof(int))) {
            pq.push({nextNum, index});
        }
    }

    // 关闭所有文件
    for (auto& input : inputs) {
        input.close();
    }
    output.close();

    // 删除临时文件
    for (const auto& chunk : chunks) {
        remove(chunk.c_str());
    }
}

void ExternalSort::sort() {
    auto chunks = splitAndSort();
    mergeChunks(chunks);
}

void ExternalSort::generateTestData(const string& filename, size_t size) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> dis(INT_MIN, INT_MAX);

    ofstream file(filename, ios::binary);
    for (size_t i = 0; i < size; i++) {
        int num = dis(gen);
        file.write(reinterpret_cast<const char*>(&num), sizeof(int));
    }
    file.close();
} external_sort.h：#ifndef EXTERNAL_SORT_H
#define EXTERNAL_SORT_H

#include <string>
#include <vector>
#include <queue>
#include <fstream>

using namespace std;

class ExternalSort {
private:
    // 每个块的最大大小（字节）
    static const size_t CHUNK_SIZE = 1024 * 1024 * 1024; // 1GB
    string inputFile;
    string outputFile;
    string tempDir;

    // 用于多路归并的比较器
    struct ChunkCompare {
        bool operator()(const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        }
    };

    // 将文件分割成较小的块并排序
    vector<string> splitAndSort();
    
    // 合并已排序的块
    void mergeChunks(const vector<string>& chunks);

    // 生成临时文件名
    string getTempFileName(int index);

public:
    ExternalSort(const string& input, const string& output, const string& temp);
    void sort();
    
    // 生成测试数据
    static void generateTestData(const string& filename, size_t size);
};

#endif main.cpp：#include "external_sort.h"
#include <iostream>
#include <chrono>

using namespace std;

int main() {
    const string inputFile = "input.bin";
    const string outputFile = "output.bin";
    const string tempDir = "temp";

    // 生成测试数据（约4GB大小）
    size_t numIntegers = 1024 * 1024 * 1024; // 10亿个整数
    cout << "生成测试数据..." << endl;
    ExternalSort::generateTestData(inputFile, numIntegers);

    // 创建临时目录
    system("mkdir -p temp");

    // 开始排序
    cout << "开始排序..." << endl;
    auto start = chrono::high_resolution_clock::now();

    ExternalSort sorter(inputFile, outputFile, tempDir);
    sorter.sort();

    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::seconds>(end - start);
    
    cout << "排序完成！用时: " << duration.count() << " 秒" << endl;

    // 清理临时目录
    system("rm -rf temp");

    return 0;
} Dockerfile：FROM gcc:latest

WORKDIR /app
COPY . .

RUN g++ -o external_sort main.cpp external_sort.cpp -std=c++17

CMD ["./external_sort"] }上述代码在单核Intel(R)Core(TM)Ultra 9 185H上排序用时为763秒。任务完成代码2（基于代码1进行一些优化）：{external_sort.h:#ifndef EXTERNAL_SORT_H
#define EXTERNAL_SORT_H

#include <string>
#include <vector>
#include <queue>
#include <fstream>
#include <thread>

using namespace std;

class ExternalSort {
private:
    // 优化：增加缓冲区大小常量
    static const size_t BUFFER_SIZE = 8192; // 8KB 缓冲区
    static const size_t CHUNK_SIZE = 1024 * 1024 * 1024; // 1GB
    static const size_t MAX_THREADS = thread::hardware_concurrency(); // 获取CPU核心数
    
    string inputFile;
    string outputFile;
    string tempDir;

    struct ChunkCompare {
        bool operator()(const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        }
    };

    vector<string> splitAndSort();
    void mergeChunks(const vector<string>& chunks);
    string getTempFileName(int index);
    
    // 新增：并行处理函数
    void sortChunk(vector<int>& buffer);
    void processChunk(const string& chunkFile, vector<int>& buffer);

public:
    ExternalSort(const string& input, const string& output, const string& temp);
    void sort();
    static void generateTestData(const string& filename, size_t size);
};

#endif external_sort.cpp:#include "external_sort.h"
#include <algorithm>
#include <random>
#include <iostream>
#include <climits>
#include <execution>
#include <thread>
#include <future>

using namespace std;

ExternalSort::ExternalSort(const string& input, const string& output, const string& temp)
    : inputFile(input), outputFile(output), tempDir(temp) {}

string ExternalSort::getTempFileName(int index) {
    return tempDir + "/chunk_" + to_string(index) + ".tmp";
}

void ExternalSort::sortChunk(vector<int>& buffer) {
    std::sort(execution::par_unseq, buffer.begin(), buffer.end());
}

void ExternalSort::processChunk(const string& chunkFile, vector<int>& buffer) {
    sortChunk(buffer);
    
    ofstream chunk(chunkFile, ios::binary);
    // 设置输出缓冲区
    vector<char> writeBuffer(BUFFER_SIZE);
    chunk.rdbuf()->pubsetbuf(writeBuffer.data(), BUFFER_SIZE);
    
    chunk.write(reinterpret_cast<const char*>(buffer.data()), 
                buffer.size() * sizeof(int));
    chunk.close();
}

vector<string> ExternalSort::splitAndSort() {
    vector<string> chunkFiles;
    ifstream input(inputFile, ios::binary);
    
    // 设置输入缓冲区
    vector<char> readBuffer(BUFFER_SIZE);
    input.rdbuf()->pubsetbuf(readBuffer.data(), BUFFER_SIZE);
    
    vector<future<void>> futures;
    int chunkIndex = 0;

    while (input) {
        vector<int> buffer;
        buffer.reserve(CHUNK_SIZE / sizeof(int)); // 预分配内存
        
        // 批量读取数据
        while (buffer.size() * sizeof(int) < CHUNK_SIZE && !input.eof()) {
            vector<int> tempBuffer(BUFFER_SIZE / sizeof(int));
            size_t bytesRead = input.read(reinterpret_cast<char*>(tempBuffer.data()), 
                                        BUFFER_SIZE).gcount();
            size_t numInts = bytesRead / sizeof(int);
            buffer.insert(buffer.end(), tempBuffer.begin(), tempBuffer.begin() + numInts);
        }

        if (buffer.empty()) break;

        string chunkFile = getTempFileName(chunkIndex++);
        chunkFiles.push_back(chunkFile);

        // 异步处理块
        futures.push_back(
            async(launch::async, 
                  &ExternalSort::processChunk, 
                  this, 
                  chunkFile, 
                  move(buffer))
        );

        // 控制并发数量
        if (futures.size() >= MAX_THREADS) {
            for (auto& f : futures) f.wait();
            futures.clear();
        }
    }

    // 等待所有任务完成
    for (auto& f : futures) f.wait();
    input.close();
    return chunkFiles;
}

void ExternalSort::mergeChunks(const vector<string>& chunks) {
    vector<ifstream> inputs;
    vector<vector<char>> inputBuffers(chunks.size(), vector<char>(BUFFER_SIZE));
    
    // 为每个输入流设置缓冲区
    for (size_t i = 0; i < chunks.size(); i++) {
        inputs.emplace_back(chunks[i], ios::binary);
        inputs[i].rdbuf()->pubsetbuf(inputBuffers[i].data(), BUFFER_SIZE);
    }

    priority_queue<pair<int, int>, 
                  vector<pair<int, int>>, 
                  ChunkCompare> pq;
    
    // 初始化优先队列
    for (size_t i = 0; i < chunks.size(); i++) {
        int num;
        if (inputs[i].read(reinterpret_cast<char*>(&num), sizeof(int))) {
            pq.push({num, i});
        }
    }

    ofstream output(outputFile, ios::binary);
    vector<char> writeBuffer(BUFFER_SIZE);
    output.rdbuf()->pubsetbuf(writeBuffer.data(), BUFFER_SIZE);

    vector<int> mergeBuffer;
    mergeBuffer.reserve(BUFFER_SIZE / sizeof(int));

    while (!pq.empty()) {
        auto [num, index] = pq.top();
        pq.pop();

        mergeBuffer.push_back(num);

        if (mergeBuffer.size() == mergeBuffer.capacity()) {
            output.write(reinterpret_cast<const char*>(mergeBuffer.data()), 
                        mergeBuffer.size() * sizeof(int));
            mergeBuffer.clear();
        }

        int nextNum;
        if (inputs[index].read(reinterpret_cast<char*>(&nextNum), sizeof(int))) {
            pq.push({nextNum, index});
        }
    }

    // 写入剩余数据
    if (!mergeBuffer.empty()) {
        output.write(reinterpret_cast<const char*>(mergeBuffer.data()), 
                    mergeBuffer.size() * sizeof(int));
    }

    // 清理资源
    for (auto& input : inputs) input.close();
    output.close();

    for (const auto& chunk : chunks) {
        remove(chunk.c_str());
    }
}

void ExternalSort::sort() {
    auto chunks = splitAndSort();
    mergeChunks(chunks);
}

void ExternalSort::generateTestData(const string& filename, size_t size) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> dis(INT_MIN, INT_MAX);

    ofstream file(filename, ios::binary);
    vector<char> writeBuffer(BUFFER_SIZE);
    file.rdbuf()->pubsetbuf(writeBuffer.data(), BUFFER_SIZE);

    vector<int> buffer;
    buffer.reserve(BUFFER_SIZE / sizeof(int));

    for (size_t i = 0; i < size; i++) {
        buffer.push_back(dis(gen));
        
        if (buffer.size() == buffer.capacity()) {
            file.write(reinterpret_cast<const char*>(buffer.data()), 
                      buffer.size() * sizeof(int));
            buffer.clear();
        }
    }

    if (!buffer.empty()) {
        file.write(reinterpret_cast<const char*>(buffer.data()), 
                  buffer.size() * sizeof(int));
    }

    file.close();
}  main.cpp:#include "external_sort.h"
#include <iostream>
#include <chrono>

using namespace std;

int main() {
    const string inputFile = "input.bin";
    const string outputFile = "output.bin";
    const string tempDir = "temp";

    // 生成测试数据（约4GB大小）
    size_t numIntegers = 1024 * 1024 * 1024; // 10亿个整数
    cout << "生成测试数据..." << endl;
    ExternalSort::generateTestData(inputFile, numIntegers);

    // 创建临时目录
    system("mkdir -p temp");

    // 开始排序
    cout << "开始排序..." << endl;
    auto start = chrono::high_resolution_clock::now();

    ExternalSort sorter(inputFile, outputFile, tempDir);
    sorter.sort();

    auto end = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::seconds>(end - start);
    
    cout << "排序完成！用时: " << duration.count() << " 秒" << endl;

    // 清理临时目录
    system("rm -rf temp");

    return 0;
}  Dockerfile:FROM gcc:latest

WORKDIR /app
COPY . .

RUN g++ -o external_sort main.cpp external_sort.cpp -std=c++17

CMD ["./external_sort"] }上述代码在单核Intel(R)Core(TM)Ultra 9 185H上排序用时为753秒